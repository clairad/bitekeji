一、右值引用


1、什么是右值？
纯右值、将亡值

※可以取地址的统统是左值，否则是右值。

2、move forward
move是将一个值强制转换成右值
forward是将一个值转换为左值/右值

※右值引用可以延长一个临时对象的生命周期
※右值引用做返回值参考引用和指针，不能返回临时变量的右值引用。

3、移动构造函数

允许使用右值进行构造
※右值构造所用到的对象往往都是临时对象，所以可以直接将其资源转移，以节省时间，所以不要将左值通过move转成右值后去构造，否则该左值的资源将被转移，无法再使用。


4、类默认函数
移动构造函数和移动赋值，如果用到了但是没有实现，系统会给一个默认的函数。但是这个函数只会实现浅拷贝，会带来很多问题，所以如果有使用的需求，一定要自己实现一个。

5、通用引用：
用一个模板来实现：
template <typename T>
void func(T&& t)
{
	
}
如果传入的是int &&，那么T就直接代表int，如果传入的是int &，那么T代表int &

6、引用折叠：
右值引用+右值引用=右值引用 左值引用+右值引用=左值引用
int && && -> int &&
int && & / int & && -> int &

二、lambda表达式

※lambda表达式底层的实现是通过仿函数实现的。
※lambda表达式可以使用全局变量，但是不能捕捉全局变量。
※lambda表达式可以赋值给函数指针变量。



